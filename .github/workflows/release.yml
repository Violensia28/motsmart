name: Release (ESP32 full)

on:
  push:
    tags:
      - 'v*.*.*'        # contoh: v0.3.1
  workflow_dispatch:     # bisa dijalankan manual dari tab Actions

env:
  # GANTI ke nama environment "full" sesuai platformio.ini jika berbeda
  PIO_ENV: full

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write        # bikin Release & upload aset
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PlatformIO Core (CLI)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install platformio

      # Cari platformio.ini (mendukung proyek di subfolder)
      - name: Locate PlatformIO project dir
        id: pio
        shell: bash
        run: |
          set -e
          FILE="$(git ls-files | grep -m1 -E '^.*platformio\.ini$' || true)"
          if [ -z "$FILE" ]; then
            echo "platformio.ini not found anywhere in repo." >&2
            exit 1
          fi
          DIR="$(dirname "$FILE")"
          echo "dir=$DIR" >> "$GITHUB_OUTPUT"
          echo "Found platformio.ini at: $DIR"

      # (opsional) tampilkan daftar env untuk debug
      - name: List PIO environments
        working-directory: ${{ steps.pio.outputs.dir }}
        run: pio run -t envlist || true

      # Build environment FULL
      - name: Build FULL ESP32
        working-directory: ${{ steps.pio.outputs.dir }}
        run: pio run -e $PIO_ENV -v

      # Kumpulkan aset rilis & siapkan ZIP + checksum + panduan Android
      - name: Prepare release assets
        id: prep
        working-directory: ${{ steps.pio.outputs.dir }}
        shell: bash
        run: |
          set -e
          OUT=".pio/build/$PIO_ENV"
          mkdir -p dist

          # Salin berkas penting (nama file bisa berbeda, gunakan pola)
          cp "$OUT"/bootloader*.bin dist/bootloader.bin 2>/dev/null || true
          cp "$OUT"/partitions*.bin dist/partitions.bin 2>/dev/null || true
          cp "$OUT"/firmware.bin    dist/firmware.bin

          # Offsets standar ESP32 (lihat ESP-IDF Partition Tables)
          cat > dist/offsets.txt <<'EOF'
bootloader.bin @ 0x1000
partitions.bin @ 0x8000
firmware.bin   @ 0x10000
EOF

          # Panduan flash Android (ESP32_flash)
          cat > dist/readme_android.md <<'EOF'
# Flash dari Android (USB-OTG)
1) Install aplikasi **ESP32_flash** (Play Store).
2) Hubungkan ESP32 ke Android via OTG. Masuk bootloader (tahan **BOOT**, tekan-lepas **EN/RST**, lepas **BOOT**).
3) Flash 3 berkas dengan offset:
   - bootloader.bin → 0x1000
   - partitions.bin → 0x8000
   - firmware.bin   → 0x10000

Catatan:
- Offset di atas sesuai skema standar ESP32 (ESP-IDF Partition Tables).
- Jika partisi proyekmu kustom, sesuaikan offsets.txt.
EOF

          # Buat checksum & ZIP
          (cd dist && sha256sum * > SHA256SUMS.txt)
          ZIP="motsmart_full_esp32_${GITHUB_REF_NAME#refs/tags/}.zip"
          (cd dist && zip -9 ../$ZIP *)
          echo "zipname=$ZIP" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "mot-smart-firmware ${{ github.ref_name }} (ESP32 full)"
          draft: false
          prerelease: false
          files: |
            ${{ steps.pio.outputs.dir }}/${{ steps.prep.outputs.zipname }}
            ${{ steps.pio.outputs.dir }}/dist/SHA256SUMS.txt
